{"version":3,"sources":["webpack://CPU/../dmg-01-js/pkg/dmg_01_js.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;;AAEA;;AAEA,eAAe,iBAAiB,GAAG,YAAY,GAAG,YAAY,GAAG,aAAa;;AAE9E;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAAqC,yDAAyD;AAC9F;AACA;AACA,gCAAuC,yDAAyD;AAChG;AACA,UAAU,IAAI;AACd,UAAU,OAAO;AACjB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"0.cpu.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './dmg_01_js_bg';\n\nconst stack = [];\n\nconst slab = [{ obj: undefined }, { obj: null }, { obj: true }, { obj: false }];\n\nfunction getObject(idx) {\n    if ((idx & 1) === 1) {\n        return stack[idx >> 1];\n    } else {\n        const val = slab[idx >> 1];\n        \n        return val.obj;\n        \n    }\n}\n\nlet slab_next = slab.length;\n\nfunction dropRef(idx) {\n    \n    idx = idx >> 1;\n    if (idx < 4) return;\n    let obj = slab[idx];\n    \n    obj.cnt -= 1;\n    if (obj.cnt > 0) return;\n    \n    // If we hit 0 then free up our space in the slab\n    slab[idx] = slab_next;\n    slab_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropRef(idx);\n    return ret;\n}\n/**\n*/\nexport const Target = Object.freeze({ A:0,B:1,C:2,D:3,E:4,F:5,H:6,L:7,AF:8,BC:9,DE:10,HL:11, });\n/**\n*/\nexport const Register = Object.freeze({ A:0,B:1,C:2,D:3,E:4,F:5,H:6,L:7,AF:8,BC:9,DE:10,HL:11, });\n/**\n* @param {CPU} arg0\n* @param {number} arg1\n* @returns {CPU}\n*/\nexport function add(arg0, arg1) {\n    const ptr0 = arg0.ptr;\n    if (ptr0 === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    arg0.ptr = 0;\n    return CPU.__construct(wasm.add(ptr0, arg1));\n}\n\nclass ConstructorToken {\n    constructor(ptr) {\n        this.ptr = ptr;\n    }\n}\n/**\n*/\nexport class CPU {\n    \n    static __construct(ptr) {\n        return new CPU(new ConstructorToken(ptr));\n    }\n    \n    constructor(...args) {\n        if (args.length === 1 && args[0] instanceof ConstructorToken) {\n            this.ptr = args[0].ptr;\n            return;\n        }\n        \n        // This invocation of new will call this constructor with a ConstructorToken\n        let instance = CPU.new(...args);\n        this.ptr = instance.ptr;\n    }\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        wasm.__wbg_cpu_free(ptr);\n    }\n    /**\n    * @returns {CPU}\n    */\n    static new() {\n        return CPU.__construct(wasm.cpu_new());\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    set_register(arg0, arg1) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return wasm.cpu_set_register(this.ptr, arg0, arg1);\n    }\n    /**\n    * @returns {any}\n    */\n    to_json() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return takeObject(wasm.cpu_to_json(this.ptr));\n    }\n}\n\nfunction addHeapObject(obj) {\n    if (slab_next === slab.length) slab.push(slab.length + 1);\n    const idx = slab_next;\n    const next = slab[idx];\n    \n    slab_next = next;\n    \n    slab[idx] = { obj, cnt: 1 };\n    return idx << 1;\n}\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport function __wbindgen_json_parse(ptr, len) {\n    return addHeapObject(JSON.parse(getStringFromWasm(ptr, len)));\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n"],"sourceRoot":""}