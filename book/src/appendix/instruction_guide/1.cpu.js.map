{"version":3,"sources":["webpack://CPU/../dmg-01-js/pkg/dmg_01_js.js"],"names":["_dmg_01_js_bg__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","stack","slab","obj","undefined","slab_next","length","takeObject","idx","ret","getObject","cnt","dropRef","Target","Object","freeze","A","B","C","D","E","F","H","L","AF","BC","DE","HL","Register","add","arg0","arg1","ptr0","ptr","Error","CPU","__construct","ConstructorToken","[object Object]","this","args","instance","new","cachedDecoder","TextDecoder","cachegetUint8Memory","getStringFromWasm","len","decode","buffer","Uint8Array","subarray","__wbindgen_json_parse","push","next","addHeapObject","JSON","parse","__wbindgen_throw"],"mappings":"wVAAA,IAAAA,EAAAC,EAAA,GAGA,MAAAC,KAEAC,IAAeC,SAAAC,IAAoBD,IAAA,OAAeA,KAAA,IAAeA,KAAA,IAajE,IAAAE,EAAAH,EAAAI,OAgBA,SAAAC,EAAAC,GACA,MAAAC,EA5BA,SAAAD,GACA,aAAAA,GACAP,EAAAO,GAAA,GAEAN,EAAAM,GAAA,GAEAL,IAsBAO,CAAAF,GAEA,OAjBA,SAAAA,GAGA,IADAA,IAAA,GACA,SACA,IAAAL,EAAAD,EAAAM,GAEAL,EAAAQ,KAAA,EACAR,EAAAQ,IAAA,IAGAT,EAAAM,GAAAH,EACAA,EAAAG,GAKAI,CAAAJ,GACAC,EAIA,MAAAI,EAAAC,OAAAC,QAAqCC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,GAAAC,GAAA,KAGrCC,EAAAd,OAAAC,QAAuCC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,GAAAC,GAAA,KAMvC,SAAAE,EAAAC,EAAAC,GACA,MAAAC,EAAAF,EAAAG,IACA,OAAAD,EACA,UAAAE,MAAA,gCAGA,OADAJ,EAAAG,IAAA,EACAE,EAAAC,YAAArC,EAAA,EAAAiC,EAAAD,UAGAM,EACAC,YAAAL,GACAM,KAAAN,aAKAE,EAEAG,mBAAAL,GACA,WAAAE,EAAA,IAAAE,EAAAJ,IAGAK,eAAAE,GACA,OAAAA,EAAAlC,QAAAkC,EAAA,aAAAH,EAEA,YADAE,KAAAN,IAAAO,EAAA,GAAAP,KAKA,IAAAQ,EAAAN,EAAAO,OAAAF,GACAD,KAAAN,IAAAQ,EAAAR,IAEAK,OACA,MAAAL,EAAAM,KAAAN,IACAM,KAAAN,IAAA,EACAlC,EAAA,EAAAkC,GAKAK,aACA,OAAAH,EAAAC,YAAArC,EAAA,KAOAuC,aAAAR,EAAAC,GACA,OAAAQ,KAAAN,IACA,UAAAC,MAAA,gCAEA,OAAAnC,EAAA,EAAAwC,KAAAN,IAAAH,EAAAC,GAKAO,UACA,OAAAC,KAAAN,IACA,UAAAC,MAAA,gCAEA,OAAA3B,EAAAR,EAAA,EAAAwC,KAAAN,OAeA,IAAAU,EAAA,IAAAC,YAAA,SAEAC,EAAA,KAQA,SAAAC,EAAAb,EAAAc,GACA,OAAAJ,EAAAK,QAPA,OAAAH,KAAAI,SAAAlD,EAAA,EAAAkD,SACAJ,EAAA,IAAAK,WAAAnD,EAAA,EAAAkD,SAEAJ,GAIAM,SAAAlB,IAAAc,IAGA,SAAAK,EAAAnB,EAAAc,GACA,OA1BA,SAAA5C,GACAE,IAAAH,EAAAI,QAAAJ,EAAAmD,KAAAnD,EAAAI,OAAA,GACA,MAAAE,EAAAH,EACAiD,EAAApD,EAAAM,GAKA,OAHAH,EAAAiD,EAEApD,EAAAM,IAAiBL,MAAAQ,IAAA,GACjBH,GAAA,EAkBA+C,CAAAC,KAAAC,MAAAX,EAAAb,EAAAc,KAGA,SAAAW,EAAAzB,EAAAc,GACA,UAAAb,MAAAY,EAAAb,EAAAc","file":"1.cpu.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './dmg_01_js_bg';\n\nconst stack = [];\n\nconst slab = [{ obj: undefined }, { obj: null }, { obj: true }, { obj: false }];\n\nfunction getObject(idx) {\n    if ((idx & 1) === 1) {\n        return stack[idx >> 1];\n    } else {\n        const val = slab[idx >> 1];\n        \n        return val.obj;\n        \n    }\n}\n\nlet slab_next = slab.length;\n\nfunction dropRef(idx) {\n    \n    idx = idx >> 1;\n    if (idx < 4) return;\n    let obj = slab[idx];\n    \n    obj.cnt -= 1;\n    if (obj.cnt > 0) return;\n    \n    // If we hit 0 then free up our space in the slab\n    slab[idx] = slab_next;\n    slab_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropRef(idx);\n    return ret;\n}\n/**\n*/\nexport const Target = Object.freeze({ A:0,B:1,C:2,D:3,E:4,F:5,H:6,L:7,AF:8,BC:9,DE:10,HL:11, });\n/**\n*/\nexport const Register = Object.freeze({ A:0,B:1,C:2,D:3,E:4,F:5,H:6,L:7,AF:8,BC:9,DE:10,HL:11, });\n/**\n* @param {CPU} arg0\n* @param {number} arg1\n* @returns {CPU}\n*/\nexport function add(arg0, arg1) {\n    const ptr0 = arg0.ptr;\n    if (ptr0 === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    arg0.ptr = 0;\n    return CPU.__construct(wasm.add(ptr0, arg1));\n}\n\nclass ConstructorToken {\n    constructor(ptr) {\n        this.ptr = ptr;\n    }\n}\n/**\n*/\nexport class CPU {\n    \n    static __construct(ptr) {\n        return new CPU(new ConstructorToken(ptr));\n    }\n    \n    constructor(...args) {\n        if (args.length === 1 && args[0] instanceof ConstructorToken) {\n            this.ptr = args[0].ptr;\n            return;\n        }\n        \n        // This invocation of new will call this constructor with a ConstructorToken\n        let instance = CPU.new(...args);\n        this.ptr = instance.ptr;\n    }\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        wasm.__wbg_cpu_free(ptr);\n    }\n    /**\n    * @returns {CPU}\n    */\n    static new() {\n        return CPU.__construct(wasm.cpu_new());\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    set_register(arg0, arg1) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return wasm.cpu_set_register(this.ptr, arg0, arg1);\n    }\n    /**\n    * @returns {any}\n    */\n    to_json() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return takeObject(wasm.cpu_to_json(this.ptr));\n    }\n}\n\nfunction addHeapObject(obj) {\n    if (slab_next === slab.length) slab.push(slab.length + 1);\n    const idx = slab_next;\n    const next = slab[idx];\n    \n    slab_next = next;\n    \n    slab[idx] = { obj, cnt: 1 };\n    return idx << 1;\n}\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport function __wbindgen_json_parse(ptr, len) {\n    return addHeapObject(JSON.parse(getStringFromWasm(ptr, len)));\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n"],"sourceRoot":""}